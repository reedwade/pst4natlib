#!/usr/bin/env python

import sys
import mailbox
import email.utils
import glob

from datetime import datetime
import time
# from elasticsearch import Elasticsearch
import csv


def split_message_recipients(recipients):
    print "split_message_recipients", recipients
    out = []
    if not recipients:
        return ['NONE']
    for a in recipients.split(','):
        a = a.strip().lower()
        if '<' in a and '>' in a:
            a = a.split('<')[1]
            a = a.split('>')[0]
        if '@' in a:
            # might be "user@example.com (Euser Example)"
            for _a in a.split():
                if '@' in _a:
                    out.append(_a)
        else:
            # can happen for local delivery addresses
            out.append(a)

    print out
    return out

f = open("out.csv", 'wt')
writer = csv.writer(f, quoting=csv.QUOTE_ALL)

writer.writerow( ('To', 'From', 'Date', 'Subject', 'MessageId', 'Collection') )
    # for i in range(10):
    #     writer.writerow( (i+1, chr(ord('a') + i), '08/%02d/07' % (i+1)) )


# es = Elasticsearch()

for mbox_file in glob.glob('../mboxes/*'):
    print
    print "opening mbox file", mbox_file
    print
    # count = 0
    mailbox_name = mbox_file.split('/')[-1]
    messages = mailbox.mbox(mbox_file)
    for message in messages:
        # print message['to']
        for message_recipient in split_message_recipients(message['to']):
            writer.writerow((
                message_recipient,
                split_message_recipients(message['from'])[0],
                int(time.mktime(email.utils.parsedate(message['date']))),
                message['subject'],
                message['Message-id'],
                mailbox_name
                ))

        # break
        # count += 1
        # print "to:{message[to]} from:{message[from]} subject:{message[subject]}".format(
        #     message=message)
        # print message.keys()
        # print message[body]
        # for message_part in message.walk():
        #     if message_part.get_content_type() == 'text/plain':

        #         ##es.index(
        #         if (count % 10) == 0:
        #             print ".",
        #         out = {
        #             'index':"reedtest",
        #             'doc_type':"email",
        #             # id':42,
        #             'body':{
        #                 "subject": message['subject'],
        #                 "to": message['to'],
        #                 "from": message['from'],
        #                 "date": email.utils.parsedate_tz(message['date']),
        #                 "body": message_part.get_payload(),
        #             }
        #         }
        #         try:
        #             es.index(**out)
        #         except Exception, e:
        #             print "failed on message", message['Message-id']  #, ":", str(e)


    # sys.exit(1)


f.close()

